{"version":3,"sources":["Components/Header.js","Components/TodoInput.js","Components/TodoItem.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","React","Component","TodoInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","todoText","handleChange","bind","assertThisInitialized","addTodo","e","setState","target","todo","length","_this2","type","onChange","className","onClick","TodoItem","id","removeTodo","text","App","todos","nextId","slice","push","filter","index","Header_Header","TodoInput_TodoInput","map","TodoItem_TodoItem","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fbdb6485.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\nexport default class Header extends React.Component {\n    render () {\n        return(\n        <h1>React Todos</h1>\n        )\n    }\n}","import React from 'react';\nimport './TodoInput.css';\n\nexport default class TodoInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: this.props.todoText};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.addTodo = this.addTodo.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({value: e.target.value});\n  }\n\n  addTodo(todo) {\n    // Ensure a todo was actually entered before submitting\n    if (todo.length > 0) {\n      this.props.addTodo(todo);\n      this.setState({value: ''});\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n        <button className=\"btn btn-primary\" onClick={() => this.addTodo(this.state.value)}>Submit</button>\n      </div>\n    );\n  }\n}","import React from 'react'\nimport './TodoItem.css'\nimport { className } from 'postcss-selector-parser';\n\nexport default class TodoItem extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    removeTodo(id) {\n        this.props.removeTodo(id);\n    }\n\n    render() {\n        return (\n            <div className=\"todoWrapper\">\n                <button className=\"removeTodo\" onClick={(e) => this.removeTodo(this.props.id)}> Remove </button>{this.props.todo.text}\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Components/Header'\nimport TodoInput from './Components/TodoInput'\nimport TodoItem from './Components/TodoItem'\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [\n        {id: 0, text: \"Make dinner tonight!\"},\n        {id: 1, text: \"Fold the laundry.\"},\n        {id: 2, text: \"Learn to make a React app!\"}\n      ],\n      nextId: 3\n    };\n\n    this.addTodo = this.addTodo.bind(this);\n    this.removeTodo = this.removeTodo.bind(this);\n}\n\naddTodo(todoText) {\n let todos = this.state.todos.slice()\n todos.push({id: this.state.nextId, text: todoText})\n this.setState({\n   todos: todos,\n   nextId: ++this.state.nextId,\n\n })\n}\n\n  \nremoveTodo(id) {\n  this.setState ({\n    todos: this.state.todos.filter((todo, index) => todo.id !== id)\n  })\n}\n\n  \nrender() {\n  return (\n    <div className=\"App\">\n      <div className=\"todo-wrapper\">\n        <Header />\n        <TodoInput todoText=\"\" addTodo={this.addTodo} />\n        <ul>\n          {\n            this.state.todos.map((todo) => {\n              return <TodoItem todo={todo} key={todo.id} id={todo.id} removeTodo={this.removeTodo}/>\n            })\n          }\n        </ul>\n      </div>\n    </div>\n  );\n}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}